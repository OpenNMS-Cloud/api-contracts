// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: querier/querier.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExporterServiceClient is the client API for ExporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExporterServiceClient interface {
	// List available exporter's interface IDs for a given time range
	GetExporterInterfaces(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*List, error)
}

type exporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExporterServiceClient(cc grpc.ClientConnInterface) ExporterServiceClient {
	return &exporterServiceClient{cc}
}

func (c *exporterServiceClient) GetExporterInterfaces(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/org.opennms.apicontracts.flows.querier.ExporterService/GetExporterInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExporterServiceServer is the server API for ExporterService service.
// All implementations must embed UnimplementedExporterServiceServer
// for forward compatibility
type ExporterServiceServer interface {
	// List available exporter's interface IDs for a given time range
	GetExporterInterfaces(context.Context, *ListRequest) (*List, error)
	mustEmbedUnimplementedExporterServiceServer()
}

// UnimplementedExporterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExporterServiceServer struct {
}

func (UnimplementedExporterServiceServer) GetExporterInterfaces(context.Context, *ListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExporterInterfaces not implemented")
}
func (UnimplementedExporterServiceServer) mustEmbedUnimplementedExporterServiceServer() {}

// UnsafeExporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExporterServiceServer will
// result in compilation errors.
type UnsafeExporterServiceServer interface {
	mustEmbedUnimplementedExporterServiceServer()
}

func RegisterExporterServiceServer(s grpc.ServiceRegistrar, srv ExporterServiceServer) {
	s.RegisterService(&ExporterService_ServiceDesc, srv)
}

func _ExporterService_GetExporterInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExporterServiceServer).GetExporterInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opennms.apicontracts.flows.querier.ExporterService/GetExporterInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExporterServiceServer).GetExporterInterfaces(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExporterService_ServiceDesc is the grpc.ServiceDesc for ExporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opennms.apicontracts.flows.querier.ExporterService",
	HandlerType: (*ExporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExporterInterfaces",
			Handler:    _ExporterService_GetExporterInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "querier/querier.proto",
}

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	// List available applications for a given time range
	GetApplications(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*List, error)
	// Get tabular summary for the TopN or a given list of applications
	GetApplicationSummaries(ctx context.Context, in *ApplicationSummariesRequest, opts ...grpc.CallOption) (*Summaries, error)
	// Get the time series data for the TopN or a given list of applications
	GetApplicationSeries(ctx context.Context, in *ApplicationSeriesRequest, opts ...grpc.CallOption) (*Series, error)
}

type applicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsServiceClient(cc grpc.ClientConnInterface) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) GetApplications(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetApplicationSummaries(ctx context.Context, in *ApplicationSummariesRequest, opts ...grpc.CallOption) (*Summaries, error) {
	out := new(Summaries)
	err := c.cc.Invoke(ctx, "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplicationSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetApplicationSeries(ctx context.Context, in *ApplicationSeriesRequest, opts ...grpc.CallOption) (*Series, error) {
	out := new(Series)
	err := c.cc.Invoke(ctx, "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplicationSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
// All implementations must embed UnimplementedApplicationsServiceServer
// for forward compatibility
type ApplicationsServiceServer interface {
	// List available applications for a given time range
	GetApplications(context.Context, *ListRequest) (*List, error)
	// Get tabular summary for the TopN or a given list of applications
	GetApplicationSummaries(context.Context, *ApplicationSummariesRequest) (*Summaries, error)
	// Get the time series data for the TopN or a given list of applications
	GetApplicationSeries(context.Context, *ApplicationSeriesRequest) (*Series, error)
	mustEmbedUnimplementedApplicationsServiceServer()
}

// UnimplementedApplicationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServiceServer struct {
}

func (UnimplementedApplicationsServiceServer) GetApplications(context.Context, *ListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApplicationsServiceServer) GetApplicationSummaries(context.Context, *ApplicationSummariesRequest) (*Summaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationSummaries not implemented")
}
func (UnimplementedApplicationsServiceServer) GetApplicationSeries(context.Context, *ApplicationSeriesRequest) (*Series, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationSeries not implemented")
}
func (UnimplementedApplicationsServiceServer) mustEmbedUnimplementedApplicationsServiceServer() {}

// UnsafeApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServiceServer will
// result in compilation errors.
type UnsafeApplicationsServiceServer interface {
	mustEmbedUnimplementedApplicationsServiceServer()
}

func RegisterApplicationsServiceServer(s grpc.ServiceRegistrar, srv ApplicationsServiceServer) {
	s.RegisterService(&ApplicationsService_ServiceDesc, srv)
}

func _ApplicationsService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetApplications(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetApplicationSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetApplicationSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplicationSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetApplicationSummaries(ctx, req.(*ApplicationSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetApplicationSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetApplicationSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opennms.apicontracts.flows.querier.ApplicationsService/GetApplicationSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetApplicationSeries(ctx, req.(*ApplicationSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationsService_ServiceDesc is the grpc.ServiceDesc for ApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opennms.apicontracts.flows.querier.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApplications",
			Handler:    _ApplicationsService_GetApplications_Handler,
		},
		{
			MethodName: "GetApplicationSummaries",
			Handler:    _ApplicationsService_GetApplicationSummaries_Handler,
		},
		{
			MethodName: "GetApplicationSeries",
			Handler:    _ApplicationsService_GetApplicationSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "querier/querier.proto",
}
